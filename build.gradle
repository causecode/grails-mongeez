buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version "1.1.0"
group "com.causecode.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-gsp"
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // For Gradle Plugin
    compile gradleApi()

    provided "org.springframework.boot:spring-boot-starter-logging"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.grails:grails-core:3.3.5"
    compile "org.grails:grails-web-boot:3.3.5"
    compile "org.grails:grails-plugin-databinding:3.3.5"
    compile "org.grails:grails-plugin-services:3.3.5"
    compile "org.grails:grails-plugin-url-mappings:3.3.5"
    compile "org.grails.plugins:scaffolding:3.4.1"
    compile "org.grails.plugins:gsp:3.3.1"

    provided "org.grails.plugins:mongodb"

    compile "org.mongeez:mongeez:0.9.7-RC1"
    compile "org.reflections:reflections:0.9.10"

    profile "org.grails.profiles:web-plugin"

    provided "org.grails:grails-plugin-domain-class"

    testCompile "org.grails:grails-test-mixins:3.3.0"
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {

            if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
                return
            }

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'grails-mongeez'
                packaging 'jar'
                description 'This Plugin provides ability to run migrations on Grails-MongoDB app.'
                url 'https://github.com/causecode/grails-file-uploader'

                scm {
                    url 'scm:svn:https://github.com/causecode/grails-mongeez'
                    connection 'scm:svn:https://github.com/causecode/grails-mongeez.git'
                    developerConnection 'https://github.com:causecode/grails-mongeez.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'causecode'
                        name 'CauseCode Technologies'
                        email 'bootstrap@causecode.com'
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId "grails-mongeez"
            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
}

jar {
    exclude('**/UrlMappings*')
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
